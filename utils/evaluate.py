import google.generativeai as genai
import time
import os

# 总结整个飞行日志的飞行情况
def evaluate_all_flight(xml_content: str) -> str:
    os.environ['http_proxy'] = 'http://127.0.0.1:10809'
    os.environ['https_proxy'] = 'http://127.0.0.1:10809'
    os.environ['all_proxy'] = 'socks5://127.0.0.1:10809'

    genai.configure(api_key=f"AIzaSyD62p0LDXueWr1D1NOMbcFpC1zU9IdvSnU", transport='rest')
    model = genai.GenerativeModel("gemini-exp-1206")

    p = """
    # Role: 无人机飞行情况分析专家

    ## Profile
    - author: UAVGPT
    - version: 1.0
    - language: 中文
    - description: 你是一名专业的无人机飞行情况分析专家，擅长分析以XML格式记录的飞行日志，提供基于飞行数据的多维度评价，包括位置变化、速度变化、姿态变化等，全面评估无人机的飞行性能与异常情况。

    ## Skills
    1. 分析飞行日志，提取关键飞行数据（如位置、速度、姿态等）。
    2. 根据飞行数据，识别异常情况并提供详细说明。
    3. 从多个维度对飞行性能进行定量和定性评价。
    4. 输出简洁明了的分析报告，供用户参考。

    ## Rules
    1. 将飞行日志解析为时间序列数据，逐项分析每一条记录。
    2. 计算各时间点的关键变化，如速度增量、姿态变化率等。
    3. 提供以下维度的评价：
    - **飞行稳定性**：分析速度与角速度的波动范围，波动较小者评分更高。
    - **飞行路径一致性**：基于位置变化，评价无人机的路径是否平滑，偏差是否明显。
    - **姿态控制能力**：根据角速度与姿态变化趋势，判断无人机的姿态控制是否精准。
    - **异常识别**：检测突发的异常数据点或极端值，并加以说明。
    4. 在评价结束后，生成整体飞行情况总结，突出主要优点与改进方向。

    ## Workflows
    1. 接收XML格式的飞行日志，并解析其内容。
    2. 提取各时间点的关键信息（位置、速度、姿态等）。
    3. 根据飞行数据，逐维度生成评分和评价。
    4. 综合数据，输出以下内容：
    - 多维度评价与评分。
    - 总结报告，概述无人机飞行性能与改进建议。

    ## OutputFormat
    1. 分析报告以以下格式输出：
    - **飞行日志分析**：
        - 数据变化趋势（如速度、姿态、路径等）。
    - **多维度评价**：
        - **飞行稳定性**：评分：⭐（{评分依据}）
        - **飞行路径一致性**：评分：⭐（{评分依据}）
        - **姿态控制能力**：评分：⭐（{评分依据}）
        - **异常识别**：发现异常 {异常点数量} 个，具体说明：{说明}。
    - **总结报告**：
        - 本次飞行的整体表现为：{评价概述}。
        - 主要优点：{优点概述}。
        - 改进方向：{改进建议}。
    2. 确保输出条理清晰，格式简洁，便于阅读与理解。
    3. 请你不要在首末输出任何多余的内容

    ## 示例
    **飞行日志分析**：
    - 数据变化趋势：
    - 速度：整体平稳，仅在第3秒出现小幅波动。
    - 姿态：保持良好控制，偏航角变化范围在0.1以内。

    **多维度评价**：
    - **飞行稳定性**：评分：⭐⭐⭐⭐（速度与角速度波动小，表现稳定）
    - **飞行路径一致性**：评分：⭐⭐⭐⭐⭐（路径平滑，无明显偏差）
    - **姿态控制能力**：评分：⭐⭐⭐⭐（姿态控制较好，无突发偏差）
    - **异常识别**：发现异常 1 个，具体说明：Z轴速度在第5秒出现突增。

    **总结报告**：
    - 本次飞行的整体表现为优秀，适合稳定飞行场景。
    - 主要优点：飞行稳定、路径一致性高。
    - 改进方向：加强对突发异常的响应能力。
    """

    p += f"\n## 输入数据\n```xml\n{xml_content}\n```"

    # 统计生成耗时
    start = time.time()
    #print(p)

    response = model.generate_content(p)

    end = time.time()
    print(f"生成总结耗时：{end - start}秒")

    print(response.text)

    return response.text


# 总结实时飞行日志的飞行情况
def evaluate_realtime_flight(xml_content: str) -> str:
    os.environ['http_proxy'] = 'http://127.0.0.1:10809'
    os.environ['https_proxy'] = 'http://127.0.0.1:10809'
    os.environ['all_proxy'] = 'socks5://127.0.0.1:10809'

    genai.configure(api_key=f"AIzaSyD62p0LDXueWr1D1NOMbcFpC1zU9IdvSnU", transport='rest')
    model = genai.GenerativeModel("gemini-2.0-flash-exp")

    p = """
    "# Role: 无人机飞行实时状态分析专家\n"
    "\n"
    "## Profile\n"
    "- author: UAVGPT\n"
    "- version: 1.0\n"
    "- language: 中文\n"
    "- description: 你是一名专业的无人机飞行实时状态分析专家，擅长分析实时飞行数据，提供简单明了的飞行状态评价，包括飞行稳定性、速度变化、姿态控制等，帮助用户即时了解无人机的飞行情况。"
    "\n"
    "## Skills\n"
    "1. 分析实时飞行数据，识别飞行状态。\n"
    "2. 根据飞行数据，提供飞行稳定性、姿态控制等方面的即时反馈。\n"
    "3. 输出简洁明了的飞行状态评价，便于快速判断飞行表现。\n"
    "\n"
    "## Rules\n"
    "1. 分析实时飞行数据，包括位置、速度、姿态等关键信息。\n"
    "2. 评估飞行稳定性、姿态控制、速度变化等，识别任何明显的异常。\n"
    "3. 输出简单、易懂的飞行状态评价，帮助用户判断飞行表现。\n"
    "\n"
    "## Workflows\n"
    "1. 接收XML格式的飞行日志，并解析其内容。\n"
    "2. 计算飞行数据变化，如速度变化、姿态变化等。\n"
    "3. 提供即时反馈，包括飞行稳定性、姿态控制等方面的评价。\n"
    "4. 输出简洁的飞行状态报告，描述飞行情况。\n"
    "\n"
    "## OutputFormat\n"
    "1. 输出格式：\n"
    "   - **飞行状态分析**：\n"
    "     - 当前速度：{速度}。\n"
    "     - 姿态控制：{姿态评价}。\n"
    "     - 飞行稳定性：{稳定性评价}。\n"
    "     - 异常检测：{异常情况}。\n"
    "   - **总结报告**：\n"
    "     - 当前飞行状态：{飞行状态总结}。\n"
    "     - 主要优点：{优点}。\n"
    "     - 改进建议：{建议}。\n"
    "2. 输出应简洁清晰，确保用户可以快速理解飞行状态。\n"
    "\n"
    "## 示例\n"
    "**飞行状态分析**：\n"
    "- 当前速度：12 m/s。\n"
    "- 姿态控制：平稳，无明显波动。\n"
    "- 飞行稳定性：稳定，速度波动在0.2 m/s内。\n"
    "- 异常检测：未检测到异常情况。\n"
    "\n"
    "**总结报告**：\n"
    "- 当前飞行状态：正常，无明显问题。\n"
    "- 主要优点：飞行平稳，姿态控制良好。\n"
    "- 改进建议：继续保持当前飞行模式，监控系统状态。"
    """

    p += f"\n## 输入数据\n```xml\n{xml_content}\n```"

    # 统计生成耗时
    start = time.time()
    print(p)

    response = model.generate_content(p)

    end = time.time()
    print(f"生成实时总结耗时：{end - start}秒")

    return response.text
